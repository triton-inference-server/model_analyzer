# Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from collections import defaultdict

from model_analyzer.result.constraint_manager import ConstraintManager
import os
from .plot import Plot


class PlotManager:
    """
    This class manages the construction and arrangement
    of plots generated by model analyzer
    """
    def __init__(self, config):
        """
        Parameters
        ----------
        config : AnalyzerConfig
            The model analyzer's config containing information
            about the kind of plots to generate
        """

        self._config = config

        # Construct plot output directory
        self._plot_export_directory = os.path.join(config.export_path, 'plots')
        os.makedirs(self._plot_export_directory, exist_ok=True)

        # Constraints should be plotted as well
        self._constraints = ConstraintManager.get_constraints_for_all_models(
            self._config)

        # Dict of list of plots
        self._plots = defaultdict(list)

    def init_plots(self, plots_key):
        """
        Constructs new plots based on config
        """

        self._plots[plots_key] = [
            Plot(name=plot.name(),
                 title=plot.title(),
                 x_axis=plot.x_axis(),
                 y_axis=plot.y_axis(),
                 monotonic=plot.monotonic()) for plot in self._config.plots
        ]

    def add_result(self, plots_key, result):
        """
        Add a result to all plots
        
        Parameters
        ----------
        plots_key: str
            The name of the directory these plots will
            end up under
        result : ModelResult
            The result to add to this plot
        """

        for measurement in result.measurements():
            for plot in self._plots[plots_key]:
                plot.add_measurement(
                    model_config_label=measurement.perf_config()['model-name'],
                    measurement=measurement)

    def compile_and_export_plots(self):
        """
        Finish plotting the data
        and write the plots to disk
        """

        for plots_key, plots in self._plots.items():
            model_plot_dir = os.path.join(self._plot_export_directory,
                                          plots_key)
            os.makedirs(model_plot_dir, exist_ok=True)
            for plot in plots:
                constraints = self._constraints['default']
                if plots_key in self._constraints:
                    constraints = self._constraints[plots_key]
                plot.plot_data_and_constraints(constraints=constraints)
                plot.save(filepath=model_plot_dir)
