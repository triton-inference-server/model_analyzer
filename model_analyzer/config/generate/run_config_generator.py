# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from .config_generator_interface import ConfigGeneratorInterface
from .model_config_generator import ModelConfigGenerator
from .perf_analyzer_config_generator import PerfAnalyzerConfigGenerator

from model_analyzer.config.run.run_config import RunConfig


class RunConfigGenerator(ConfigGeneratorInterface):
    """
    Generates all RunConfigs to execute for the given model
    """

    def __init__(self, config, model, client):
        """
        Parameters
        ----------
        config: ModelAnalyzerConfig
        model: The model to generate RunConfigs for
        client: TritonClient
        """
        self._config = config
        self._model = model
        self._model_name = model.model_name()
        self._configs = self._generate_run_configs(config, model, client)

    def is_done(self):
        """ Returns true if this generator is done generating configs """
        return len(self._configs) == 0

    def next_config(self):
        """
        Returns
        -------
        RunConfig
            The next RunConfig generated by this class
        """
        return self._configs.pop(0)

    def set_last_results(self, measurement):
        """ 
        Given the results from the last RunConfig, make decisions 
        about future configurations to generate

        Parameters
        ----------
        measurement: Measurement from the last run
        """
        pass

    def _generate_run_configs(self, config, model, client):
        run_configs = []

        mcg = ModelConfigGenerator(config, model, client)

        while not mcg.is_done():
            model_config = mcg.next_config()
            variant_name = model_config.get_field("name")
            model_pa_flags = model.perf_analyzer_flags()
            pacg = PerfAnalyzerConfigGenerator(self._config, variant_name,
                                               model_pa_flags)
            while not pacg.is_done():
                perf_analyzer_config = pacg.next_config()

                run_config = self._generate_run_config(model_config,
                                                       perf_analyzer_config)
                run_configs.append(run_config)
        return run_configs

    def _generate_run_config(self, model_config, perf_analyzer_config):
        run_config = RunConfig(self._model_name, model_config,
                               perf_analyzer_config,
                               self._model.triton_server_environment())
        return run_config
